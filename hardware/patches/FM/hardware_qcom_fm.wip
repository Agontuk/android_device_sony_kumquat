diff --git a/hardware/qcom/fm/Android.mk b/hardware/qcom/fm/Android.mk
index a8d06af..10c6413 100644
--- a/hardware/qcom/fm/Android.mk
+++ b/hardware/qcom/fm/Android.mk
@@ -1,4 +1,4 @@
-ifneq (,$(filter $(QCOM_BOARD_PLATFORMS),$(TARGET_BOARD_PLATFORM)))
+ifneq (,$(filter "$(QCOM_BOARD_PLATFORMS) montblanc",$(TARGET_BOARD_PLATFORM)))
 LOCAL_PATH:= $(call my-dir)
 LOCAL_DIR_PATH:= $(call my-dir)
 include $(CLEAR_VARS)
diff --git a/hardware/qcom/fm/FMRecord/Android.mk b/hardware/qcom/fm/FMRecord/Android.mk
index 647b941..9c54670 100644
--- a/hardware/qcom/fm/FMRecord/Android.mk
+++ b/hardware/qcom/fm/FMRecord/Android.mk
@@ -1,4 +1,4 @@
-ifneq (,$(filter $(QCOM_BOARD_PLATFORMS),$(TARGET_BOARD_PLATFORM)))
+ifneq (,$(filter "$(QCOM_BOARD_PLATFORMS) montblanc",$(TARGET_BOARD_PLATFORM)))
 LOCAL_PATH:= $(call my-dir)
 include $(CLEAR_VARS)
 
diff --git a/hardware/qcom/fm/fmapp/Android.mk b/hardware/qcom/fm/fmapp/Android.mk
index cb1f066..57f90e2 100644
--- a/hardware/qcom/fm/fmapp/Android.mk
+++ b/hardware/qcom/fm/fmapp/Android.mk
@@ -1,4 +1,4 @@
-ifeq ($(BOARD_HAVE_QCOM_FM),true)
+ifneq (,$(BOARD_HAVE_QCOM_FM)$(BOARD_HAVE_STE_FM))
 
 LOCAL_PATH:= $(call my-dir)
 include $(CLEAR_VARS)
diff --git a/hardware/qcom/fm/jni/Android.mk b/hardware/qcom/fm/jni/Android.mk
index c3b3a42..ccdf838 100644
--- a/hardware/qcom/fm/jni/Android.mk
+++ b/hardware/qcom/fm/jni/Android.mk
@@ -1,4 +1,4 @@
-ifneq (,$(filter $(QCOM_BOARD_PLATFORMS),$(TARGET_BOARD_PLATFORM)))
+ifneq (,$(filter "$(QCOM_BOARD_PLATFORMS) montblanc",$(TARGET_BOARD_PLATFORM)))
 LOCAL_PATH := $(call my-dir)
 include $(CLEAR_VARS)
 
@@ -9,8 +9,7 @@ LOCAL_SHARED_LIBRARIES := \
         libnativehelper \
         libcutils
 
-LOCAL_C_INCLUDES += $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr/include
-LOCAL_ADDITIONAL_DEPENDENCIES := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr
+LOCAL_C_INCLUDES += $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/drivers/media/radio/CG2900
 
 LOCAL_CFLAGS += -include bionic/libc/kernel/common/linux/types.h
 LOCAL_CFLAGS += -include bionic/libc/kernel/common/linux/posix_types.h
diff --git a/hardware/qcom/fm/jni/android_hardware_fm.cpp b/hardware/qcom/fm/jni/android_hardware_fm.cpp
index 46ae7c4..5c27c3c 100644
--- a/hardware/qcom/fm/jni/android_hardware_fm.cpp
+++ b/hardware/qcom/fm/jni/android_hardware_fm.cpp
@@ -36,35 +36,13 @@
 #include <cutils/properties.h>
 #include <fcntl.h>
 #include <sys/ioctl.h>
-#include <media/tavarua.h>
 #include <linux/videodev2.h>
 #include <math.h>
 
-#define RADIO "/dev/radio0"
-#define FM_JNI_SUCCESS 0L
-#define FM_JNI_FAILURE -1L
-#define SEARCH_DOWN 0
-#define SEARCH_UP 1
-#define TUNE_MULT 16000
-#define HIGH_BAND 2
-#define LOW_BAND  1
-#define CAL_DATA_SIZE 23
-#define V4L2_CTRL_CLASS_USER 0x00980000
-#define V4L2_CID_PRIVATE_IRIS_SET_CALIBRATION           (V4L2_CTRL_CLASS_USER + 0x92A)
-#define V4L2_CID_PRIVATE_TAVARUA_ON_CHANNEL_THRESHOLD   (V4L2_CTRL_CLASS_USER + 0x92B)
-#define V4L2_CID_PRIVATE_TAVARUA_OFF_CHANNEL_THRESHOLD  (V4L2_CTRL_CLASS_USER + 0x92C)
-#define TX_RT_LENGTH       63
-#define WAIT_TIMEOUT 200000 /* 200*1000us */
-#define TX_RT_DELIMITER    0x0d
-#define PS_LEN    9
-#define STD_BUF_SIZE 256
-enum search_dir_t {
-    SEEK_UP,
-    SEEK_DN,
-    SCAN_UP,
-    SCAN_DN
-};
+#include <cg2900_fm_api.h>
 
+#include <stdio.h>
+#include <linux/fs.h>
 
 using namespace android;
 
@@ -73,12 +51,8 @@ static jint android_hardware_fmradio_FmReceiverJNI_acquireFdNative
         (JNIEnv* env, jobject thiz, jstring path)
 {
     int fd;
-    int i, retval=0, err;
-    char value[PROPERTY_VALUE_MAX] = {'\0'};
-    char versionStr[40] = {'\0'};
-    int init_success = 0;
+    int err;
     jboolean isCopy;
-    v4l2_capability cap;
     const char* radio_path = env->GetStringUTFChars(path, &isCopy);
     if(radio_path == NULL){
         return FM_JNI_FAILURE;
@@ -90,56 +64,29 @@ static jint android_hardware_fmradio_FmReceiverJNI_acquireFdNative
     if(fd < 0){
         return FM_JNI_FAILURE;
     }
-    //Read the driver verions
-    err = ioctl(fd, VIDIOC_QUERYCAP, &cap);
-
-    ALOGD("VIDIOC_QUERYCAP returns :%d: version: %d \n", err , cap.version );
-
-    if( err >= 0 ) {
-       ALOGD("Driver Version(Same as ChipId): %x \n",  cap.version );
-       /*Conver the integer to string */
-       sprintf(versionStr, "%d", cap.version );
-       property_set("hw.fm.version", versionStr);
-    } else {
-       return FM_JNI_FAILURE;
-    }
-    /*Set the mode for soc downloader*/
-    property_set("hw.fm.mode", "normal");
-    /* Need to clear the hw.fm.init firstly */
-    property_set("hw.fm.init", "0");
-    property_set("ctl.start", "fm_dl");
-    sched_yield();
-    for(i=0; i<45; i++) {
-        property_get("hw.fm.init", value, NULL);
-        if (strcmp(value, "1") == 0) {
-            init_success = 1;
-            break;
-        } else {
-            usleep(WAIT_TIMEOUT);
-        }
-    }
-    ALOGE("init_success:%d after %f seconds \n", init_success, 0.2*i);
-    if(!init_success) {
-        property_set("ctl.stop", "fm_dl");
-       // close the fd(power down)
-
-       close(fd);
-        return FM_JNI_FAILURE;
-    }
-    return fd;
+    
+    file* fp = fdopen(fd, "r");
+    
+    err = cg2900_open(fp);
+   
+    if( err != 0 )
+      return FM_JNI_FAILURE;
+    else
+      return fd;
 }
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_closeFdNative
     (JNIEnv * env, jobject thiz, jint fd)
 {
-    int i = 0;
-    int cleanup_success = 0;
-    char value = 0, retval =0;
-
-    property_set("ctl.stop", "fm_dl");
-    close(fd);
-    return FM_JNI_SUCCESS;
+    file* fp = fdopen(fd, "r");
+    
+    int err = cg2900_release(fp);
+   
+    if( err != 0 )
+      return FM_JNI_FAILURE;
+    else
+      return FM_JNI_SUCCESS;
 }
 
 /********************************************************************
@@ -150,14 +97,18 @@ static jint android_hardware_fmradio_FmReceiverJNI_closeFdNative
 static jint android_hardware_fmradio_FmReceiverJNI_getFreqNative
     (JNIEnv * env, jobject thiz, jint fd)
 {
-    int err;
+    int ret_val;
     struct v4l2_frequency freq;
     freq.type = V4L2_TUNER_RADIO;
-    err = ioctl(fd, VIDIOC_G_FREQUENCY, &freq);
-    if(err < 0){
+    
+    file* fp = fdopen(fd, "r");
+    
+    ret_val = vidioc_get_frequency(fp, NULL, &freq);
+   
+    if( ret_val < 0 )
       return FM_JNI_FAILURE;
-    }
-    return ((freq.frequency*1000)/TUNE_MULT);
+    else
+      return ret_val;
 }
 
 /*native interface */
@@ -165,15 +116,18 @@ static jint android_hardware_fmradio_FmReceiverJNI_setFreqNative
     (JNIEnv * env, jobject thiz, jint fd, jint freq)
 {
     int err;
-    double tune;
     struct v4l2_frequency freq_struct;
     freq_struct.type = V4L2_TUNER_RADIO;
-    freq_struct.frequency = (freq*TUNE_MULT/1000);
-    err = ioctl(fd, VIDIOC_S_FREQUENCY, &freq_struct);
-    if(err < 0){
-            return FM_JNI_FAILURE;
-    }
-    return FM_JNI_SUCCESS;
+    freq_struct.frequency = freq;
+
+    file* fp = fdopen(fd, "r");
+    
+    err = vidioc_set_frequency(fp, NULL, &freq_struct);
+   
+    if( ret_val < 0 )
+      return FM_JNI_FAILURE;
+    else
+      return FM_JNI_SUCCESS;
 }
 
 /* native interface */
@@ -185,10 +139,11 @@ static jint android_hardware_fmradio_FmReceiverJNI_setControlNative
     int err;
     ALOGE("id(%x) value: %x\n", id, value);
     control.value = value;
+    file* fp = fdopen(fd, "r");
 
     control.id = id;
-    for(i=0;i<3;i++) {
-        err = ioctl(fd,VIDIOC_S_CTRL,&control);
+    for( i = 0; i < 3; i++) {
+        err = vidioc_set_ctrl(fp, NULL, &control);
         if(err >= 0){
             return FM_JNI_SUCCESS;
         }
@@ -200,34 +155,6 @@ static jint android_hardware_fmradio_FmReceiverJNI_setControlNative
 static jint android_hardware_fmradio_FmReceiverJNI_SetCalibrationNative
      (JNIEnv * env, jobject thiz, jint fd, jbyteArray buff)
 {
-
-    struct v4l2_ext_control ext_ctl;
-    char tmp[CAL_DATA_SIZE] = {0x00};
-    int err;
-    FILE* cal_file;
-
-    cal_file = fopen("/data/app/Riva_fm_cal", "r" );
-    if(cal_file != NULL) {
-        ext_ctl.id = V4L2_CID_PRIVATE_IRIS_SET_CALIBRATION;
-        if (fread(&tmp[0],1,CAL_DATA_SIZE,cal_file) < CAL_DATA_SIZE)
-        {
-            ALOGE("File read failed");
-            return FM_JNI_FAILURE;
-        }
-        ext_ctl.string = tmp;
-        ext_ctl.size = CAL_DATA_SIZE;
-        struct v4l2_ext_controls v4l2_ctls;
-
-        v4l2_ctls.ctrl_class = V4L2_CTRL_CLASS_USER,
-        v4l2_ctls.count   = 1,
-        v4l2_ctls.controls  = &ext_ctl;
-        err = ioctl(fd, VIDIOC_S_EXT_CTRLS, &v4l2_ctls );
-        if(err >= 0){
-            return FM_JNI_SUCCESS;
-        }
-    }else {
-        return FM_JNI_SUCCESS;
-    }
   return FM_JNI_SUCCESS;
 }
 /* native interface */
@@ -237,9 +164,10 @@ static jint android_hardware_fmradio_FmReceiverJNI_getControlNative
     struct v4l2_control control;
     int err;
     ALOGE("id(%x)\n", id);
+    file* fp = fdopen(fd, "r");
 
     control.id = id;
-    err = ioctl(fd,VIDIOC_G_CTRL,&control);
+    err =  vidioc_get_ctrl(fp, NULL, &control);
     if(err < 0){
         return FM_JNI_FAILURE;
     }
@@ -255,7 +183,10 @@ static jint android_hardware_fmradio_FmReceiverJNI_startSearchNative
     int err;
     hw_seek.seek_upward = dir;
     hw_seek.type = V4L2_TUNER_RADIO;
-    err = ioctl(fd,VIDIOC_S_HW_FREQ_SEEK,&hw_seek);
+    file* fp = fdopen(fd, "r");
+    
+    err = vidioc_set_hw_freq_seek(fp, NULL, &hw_seek);
+    
     if(err < 0){
         ALOGE("startSearchNative: ioctl failed!!! with error %d\n", err);
         return FM_JNI_FAILURE;
@@ -268,11 +199,8 @@ static jint android_hardware_fmradio_FmReceiverJNI_startSearchNative
 static jint android_hardware_fmradio_FmReceiverJNI_cancelSearchNative
     (JNIEnv * env, jobject thiz, jint fd)
 {
-    struct v4l2_control control;
-    int err;
-    control.id=V4L2_CID_PRIVATE_TAVARUA_SRCHON;
-    control.value=0;
-    err = ioctl(fd,VIDIOC_S_CTRL,&control);
+    int err = cg2900_fm_stop_scan();
+    
     if(err < 0){
         return FM_JNI_FAILURE;
     }
@@ -288,7 +216,10 @@ static jint android_hardware_fmradio_FmReceiverJNI_getRSSINative
 
     tuner.index = 0;
     tuner.signal = 0;
-    err = ioctl(fd, VIDIOC_G_TUNER, &tuner);
+    file* fp = fdopen(fd, "r");
+    
+    err = static int vidioc_get_tuner(fp, NULL, &tuner);
+    
     if(err < 0){
         return FM_JNI_FAILURE;
     }
@@ -299,14 +230,8 @@ static jint android_hardware_fmradio_FmReceiverJNI_getRSSINative
 static jint android_hardware_fmradio_FmReceiverJNI_setBandNative
     (JNIEnv * env, jobject thiz, jint fd, jint low, jint high)
 {
-    struct v4l2_tuner tuner;
-    int err;
-
-    tuner.index = 0;
-    tuner.signal = 0;
-    tuner.rangelow = low * (TUNE_MULT/1000);
-    tuner.rangehigh = high * (TUNE_MULT/1000);
-    err = ioctl(fd, VIDIOC_S_TUNER, &tuner);
+    int err = cg2900_fm_set_band(CG2900_FM_BAND_US_EU);
+    
     if(err < 0){
         return FM_JNI_FAILURE;
     }
@@ -320,8 +245,10 @@ static jint android_hardware_fmradio_FmReceiverJNI_getLowerBandNative
     struct v4l2_tuner tuner;
     int err;
     tuner.index = 0;
+    file* fp = fdopen(fd, "r");
 
-    err = ioctl(fd, VIDIOC_G_TUNER, &tuner);
+    err = vidioc_get_tuner(fp, NULL, &tuner);
+    
     if(err < 0){
         ALOGE("low_band value: <%x> \n", tuner.rangelow);
         return FM_JNI_FAILURE;
@@ -336,8 +263,10 @@ static jint android_hardware_fmradio_FmReceiverJNI_getUpperBandNative
     struct v4l2_tuner tuner;
     int err;
     tuner.index = 0;
+    file* fp = fdopen(fd, "r");
 
-    err = ioctl(fd, VIDIOC_G_TUNER, &tuner);
+    err = vidioc_get_tuner(fp, NULL, &tuner);
+    
     if(err < 0){
         ALOGE("high_band value: <%x> \n", tuner.rangehigh);
         return FM_JNI_FAILURE;
@@ -351,15 +280,16 @@ static jint android_hardware_fmradio_FmReceiverJNI_setMonoStereoNative
 
     struct v4l2_tuner tuner;
     int err;
+    file* fp = fdopen(fd, "r");
 
     tuner.index = 0;
-    err = ioctl(fd, VIDIOC_G_TUNER, &tuner);
+    err = vidioc_get_tuner(fp, NULL, &tuner);
 
     if(err < 0)
         return FM_JNI_FAILURE;
 
     tuner.audmode = val;
-    err = ioctl(fd, VIDIOC_S_TUNER, &tuner);
+    err = vidioc_set_tuner(fp, NULL, &tuner);
 
     if(err < 0)
         return FM_JNI_FAILURE;
@@ -368,122 +298,32 @@ static jint android_hardware_fmradio_FmReceiverJNI_setMonoStereoNative
 
 }
 
-
-
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_getBufferNative
  (JNIEnv * env, jobject thiz, jint fd, jbooleanArray buff, jint index)
 {
-    int err;
-    jboolean isCopy;
-    struct v4l2_requestbuffers reqbuf;
-    struct v4l2_buffer v4l2_buf;
-    memset(&reqbuf, 0, sizeof (reqbuf));
-    enum v4l2_buf_type type = V4L2_BUF_TYPE_PRIVATE;
-    reqbuf.type = V4L2_BUF_TYPE_PRIVATE;
-    reqbuf.memory = V4L2_MEMORY_USERPTR;
-    jboolean *bool_buffer = env->GetBooleanArrayElements(buff,&isCopy);
-    memset(&v4l2_buf, 0, sizeof (v4l2_buf));
-    v4l2_buf.index = index;
-    v4l2_buf.type = type;
-    v4l2_buf.length = STD_BUF_SIZE;
-    v4l2_buf.m.userptr = (unsigned long)bool_buffer;
-    err = ioctl(fd,VIDIOC_DQBUF,&v4l2_buf);
-    if(err < 0){
-        /* free up the memory in failure case*/
-        env->ReleaseBooleanArrayElements(buff, bool_buffer, 0);
-        return FM_JNI_FAILURE;
-    }
-
-    /* Always copy buffer and free up the memory */
-    env->ReleaseBooleanArrayElements(buff, bool_buffer, 0);
-
-    return v4l2_buf.bytesused;
+    return sizeof(v4l2_rds_data) * MAX_RDS_BUFFER * MAX_RDS_GROUPS;
 }
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_getRawRdsNative
  (JNIEnv * env, jobject thiz, jint fd, jbooleanArray buff, jint count)
 {
-
-    return (read (fd, buff, count));
-
+    file* fp = fdopen(fd, "r");
+   
+    return cg2900_read( fp, buff, count, NULL);
 }
 
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_setNotchFilterNative(JNIEnv * env, jobject thiz,jint fd, jint id, jboolean aValue)
 {
-    char value[PROPERTY_VALUE_MAX] = {'\0'};
-    int init_success = 0,i;
-    char notch[PROPERTY_VALUE_MAX] = {0x00};
-    struct v4l2_control control;
-    int err;
-    /*Enable/Disable the WAN avoidance*/
-    property_set("hw.fm.init", "0");
-    if (aValue)
-       property_set("hw.fm.mode", "wa_enable");
-    else
-       property_set("hw.fm.mode", "wa_disable");
-
-    property_set("ctl.start", "fm_dl");
-    sched_yield();
-    for(i=0; i<10; i++) {
-       property_get("hw.fm.init", value, NULL);
-       if (strcmp(value, "1") == 0) {
-          init_success = 1;
-          break;
-       } else {
-          usleep(WAIT_TIMEOUT);
-       }
-    }
-    ALOGE("init_success:%d after %f seconds \n", init_success, 0.2*i);
-
-    property_get("notch.value", notch, NULL);
-    ALOGE("Notch = %s",notch);
-    if (!strncmp("HIGH",notch,strlen("HIGH")))
-        control.value = HIGH_BAND;
-    else if(!strncmp("LOW",notch,strlen("LOW")))
-        control.value = LOW_BAND;
-    else
-        control.value = 0;
-
-    ALOGE("Notch value : %d", control.value);
-    control.id = id;
-    err = ioctl(fd, VIDIOC_S_CTRL,&control );
-    if(err < 0){
-          return FM_JNI_FAILURE;
-    }
-    return FM_JNI_SUCCESS;
+  return FM_JNI_FAILURE;
 }
 
-
 /* native interface */
 static jint android_hardware_fmradio_FmReceiverJNI_setAnalogModeNative(JNIEnv * env, jobject thiz, jboolean aValue)
 {
-    int i=0;
-    char value[PROPERTY_VALUE_MAX] = {'\0'};
-    char firmwareVersion[80];
-
-    /*Enable/Disable Analog Mode FM*/
-    property_set("hw.fm.init", "0");
-    if (aValue) {
-        property_set("hw.fm.isAnalog", "true");
-    } else {
-        property_set("hw.fm.isAnalog", "false");
-    }
-    property_set("hw.fm.mode","config_dac");
-    property_set("ctl.start", "fm_dl");
-    sched_yield();
-    for(i=0; i<10; i++) {
-       property_get("hw.fm.init", value, NULL);
-       if (strcmp(value, "1") == 0) {
-          return 1;
-       } else {
-          usleep(WAIT_TIMEOUT);
-       }
-    }
-
-    return 0;
+    return 1;
 }
 
 
@@ -498,13 +338,14 @@ static jint android_hardware_fmradio_FmReceiverJNI_setPTYNative
     (JNIEnv * env, jobject thiz, jint fd, jint pty)
 {
     ALOGE("->android_hardware_fmradio_FmReceiverJNI_setPTYNative\n");
-    struct v4l2_control control;
-
-    control.id = V4L2_CID_RDS_TX_PTY;
-    control.value = pty & MASK_PTY;
+    struct v4l2_ext_controls v4l2_ctls;
 
-    int err;
-    err = ioctl(fd, VIDIOC_S_CTRL,&control );
+    v4l2_ctls.id = V4L2_CID_RDS_TX_PTY;
+    v4l2_ctls.value = pty;
+    file* fp = fdopen(fd, "r");
+    
+    int err = vidioc_set_ext_ctrls(fp, NULL, &v4l2_ctls);
+    
     if(err < 0){
             return FM_JNI_FAILURE;
     }
@@ -515,19 +356,17 @@ static jint android_hardware_fmradio_FmReceiverJNI_setPINative
     (JNIEnv * env, jobject thiz, jint fd, jint pi)
 {
     ALOGE("->android_hardware_fmradio_FmReceiverJNI_setPINative\n");
+    struct v4l2_ext_controls v4l2_ctls;
 
-    struct v4l2_control control;
-
-    control.id = V4L2_CID_RDS_TX_PI;
-    control.value = pi & MASK_PI;
-
-    int err;
-    err = ioctl(fd, VIDIOC_S_CTRL,&control );
+    v4l2_ctls.id = V4L2_CID_RDS_TX_PI;
+    v4l2_ctls.value = pi;
+    file* fp = fdopen(fd, "r");
+    
+    int err = vidioc_set_ext_ctrls(fp, NULL, &v4l2_ctls);
+    
     if(err < 0){
-		ALOGE("->pty native failed");
             return FM_JNI_FAILURE;
     }
-
     return FM_JNI_SUCCESS;
 }
 
@@ -572,9 +411,10 @@ static jint android_hardware_fmradio_FmReceiverJNI_startRTNative
     v4l2_ctls.ctrl_class = V4L2_CTRL_CLASS_FM_TX,
     v4l2_ctls.count      = 1,
     v4l2_ctls.controls   = &ext_ctl;
+    
+    file* fp = fdopen(fd, "r");
 
-
-    err = ioctl(fd, VIDIOC_S_EXT_CTRLS, &v4l2_ctls );
+    err = vidioc_set_ext_ctrls(fp, NULL, &v4l2_ctls);
     env->ReleaseStringUTFChars(radio_text, rt_string);
     if (rt_string1 != NULL) {
         free(rt_string1);
@@ -592,17 +432,7 @@ static jint android_hardware_fmradio_FmReceiverJNI_startRTNative
 static jint android_hardware_fmradio_FmReceiverJNI_stopRTNative
     (JNIEnv * env, jobject thiz, jint fd )
 {
-    ALOGE("->android_hardware_fmradio_FmReceiverJNI_stopRTNative\n");
-    int err;
-    struct v4l2_control control;
-    control.id = V4L2_CID_PRIVATE_TAVARUA_STOP_RDS_TX_RT;
-
-    err = ioctl(fd, VIDIOC_S_CTRL , &control);
-    if(err < 0){
-            return FM_JNI_FAILURE;
-    }
-    ALOGE("->android_hardware_fmradio_FmReceiverJNI_stopRTNative is SUCCESS\n");
-    return FM_JNI_SUCCESS;
+  return cg2900_fm_tx_rds(false);
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_startPSNative
@@ -649,7 +479,9 @@ static jint android_hardware_fmradio_FmReceiverJNI_startPSNative
     v4l2_ctls.count      = 1,
     v4l2_ctls.controls   = &ext_ctl;
 
-    err = ioctl(fd, VIDIOC_S_EXT_CTRLS, &v4l2_ctls);
+    file* fp = fdopen(fd, "r");
+
+    err = vidioc_set_ext_ctrls(fp, NULL, &v4l2_ctls);
     if (err < 0) {
         ALOGE("VIDIOC_S_EXT_CTRLS for Start PS returned : %d\n", err);
         free(ps_copy);
@@ -665,69 +497,27 @@ static jint android_hardware_fmradio_FmReceiverJNI_startPSNative
 static jint android_hardware_fmradio_FmReceiverJNI_stopPSNative
     (JNIEnv * env, jobject thiz, jint fd)
 {
-    ALOGE("->android_hardware_fmradio_FmReceiverJNI_stopPSNative\n");
-    struct v4l2_control control;
-    control.id = V4L2_CID_PRIVATE_TAVARUA_STOP_RDS_TX_PS_NAME;
-
-    int err;
-    err = ioctl(fd, VIDIOC_S_CTRL , &control);
-    if(err < 0){
-            return FM_JNI_FAILURE;
-    }
-    ALOGE("->android_hardware_fmradio_FmReceiverJNI_stopPSNative is SUCCESS\n");
-    return FM_JNI_SUCCESS;
+  return FM_JNI_FAILURE;
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_configureSpurTable
     (JNIEnv * env, jobject thiz, jint fd)
 {
-    ALOGD("->android_hardware_fmradio_FmReceiverJNI_configureSpurTable\n");
-    int retval = 0;
-    struct v4l2_control control;
-
-    control.id = V4L2_CID_PRIVATE_UPDATE_SPUR_TABLE;
-    retval = ioctl(fd, VIDIOC_S_CTRL, &control);
-    if (retval < 0) {
-            ALOGE("configureSpurTable: Failed to Write the SPUR Table\n");
-            return FM_JNI_FAILURE;
-    } else
-            ALOGD("configureSpurTable: SPUR Table Configuration successful\n");
-
-    return FM_JNI_SUCCESS;
+  return FM_JNI_FAILURE;
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_setPSRepeatCountNative
     (JNIEnv * env, jobject thiz, jint fd, jint repCount)
 {
-    ALOGE("->android_hardware_fmradio_FmReceiverJNI_setPSRepeatCountNative\n");
-
-    struct v4l2_control control;
-
-    control.id = V4L2_CID_PRIVATE_TAVARUA_TX_SETPSREPEATCOUNT;
-    control.value = repCount & MASK_TXREPCOUNT;
-
-    int err;
-    err = ioctl(fd, VIDIOC_S_CTRL,&control );
-    if(err < 0){
-            return FM_JNI_FAILURE;
-    }
-
-    ALOGE("->android_hardware_fmradio_FmReceiverJNI_setPSRepeatCountNative is SUCCESS\n");
-    return FM_JNI_SUCCESS;
+  return FM_JNI_FAILURE;
 }
 
 static jint android_hardware_fmradio_FmReceiverJNI_setTxPowerLevelNative
     (JNIEnv * env, jobject thiz, jint fd, jint powLevel)
 {
     ALOGE("->android_hardware_fmradio_FmReceiverJNI_setTxPowerLevelNative\n");
-
-    struct v4l2_control control;
-
-    control.id = V4L2_CID_TUNE_POWER_LEVEL;
-    control.value = powLevel;
-
-    int err;
-    err = ioctl(fd, VIDIOC_S_CTRL,&control );
+    int err = cg2900_fm_tx_set_power_level(powLevel);
+    
     if(err < 0){
             return FM_JNI_FAILURE;
     }
