diff --git a/hardware/libhardware/include/hardware/audio_policy.h b/hardware/libhardware/include/hardware/audio_policy.h
index 4e75e02..ea3dfcb 100644
--- a/hardware/libhardware/include/hardware/audio_policy.h
+++ b/hardware/libhardware/include/hardware/audio_policy.h
@@ -159,7 +159,12 @@ struct audio_policy {
                                    uint32_t samplingRate,
                                    audio_format_t format,
                                    audio_channel_mask_t channelMask,
+#ifdef STE_AUDIO
+                                   audio_in_acoustics_t acoustics,
+                                   audio_input_clients *inputClientId);
+#else
                                    audio_in_acoustics_t acoustics);
+#endif
 
     /* indicates to the audio policy manager that the input starts being used */
     int (*start_input)(struct audio_policy *pol, audio_io_handle_t input);
@@ -312,10 +317,19 @@ struct audio_policy_service_ops {
                                     uint32_t *pSamplingRate,
                                     audio_format_t *pFormat,
                                     audio_channel_mask_t *pChannelMask,
+#ifdef STE_AUDIO
+                                    audio_in_acoustics_t acoustics,
+                                    audio_input_clients *pInputClientId);
+
+    /* closes an audio input */
+    int (*close_input)(void *service, audio_io_handle_t input,
+                        audio_input_clients *inputClientId);
+#else
                                     audio_in_acoustics_t acoustics);
 
     /* closes an audio input */
     int (*close_input)(void *service, audio_io_handle_t input);
+#endif
 
     /* */
     /* misc control functions */
@@ -408,7 +422,12 @@ struct audio_policy_service_ops {
                                     audio_devices_t *pDevices,
                                     uint32_t *pSamplingRate,
                                     audio_format_t *pFormat,
+#ifdef STE_AUDIO
+                                    audio_channel_mask_t *pChannelMask,
+                                    audio_input_clients *pInputClientId);
+#else
                                     audio_channel_mask_t *pChannelMask);
+#endif
 
 };
 
diff --git a/hardware/libhardware/include/hardware/fb.h b/hardware/libhardware/include/hardware/fb.h
index 135e4aa..f6ba0b6 100644
--- a/hardware/libhardware/include/hardware/fb.h
+++ b/hardware/libhardware/include/hardware/fb.h
@@ -42,18 +42,32 @@ typedef struct framebuffer_device_t {
     const uint32_t  flags;
 
     /* dimensions of the framebuffer in pixels */
+#ifdef STE_HARDWARE
+    uint32_t  width;
+    uint32_t  height;
+#else
     const uint32_t  width;
     const uint32_t  height;
+#endif
 
     /* frambuffer stride in pixels */
+#ifdef STE_HARDWARE
+    int       stride;
+#else
     const int       stride;
+#endif
 
     /* framebuffer pixel format */
     const int       format;
 
     /* resolution of the framebuffer's display panel in pixel per inch*/
+#ifdef STE_HARDWARE
+    float     xdpi;
+    float     ydpi;
+#else
     const float     xdpi;
     const float     ydpi;
+#endif
 
     /* framebuffer's display panel refresh rate in frames per second */
     const float     fps;
@@ -144,6 +158,27 @@ typedef struct framebuffer_device_t {
      */
     int (*enableScreen)(struct framebuffer_device_t* dev, int enable);
 
+#ifdef STE_HARDWARE
+    /*
+     * Sets the number of degrees ccw the framebuffer shall be rotated before
+     * being sent to the display. This call may change the framebuffer's
+     * dimensions.
+     */
+    int (*rotate)(struct framebuffer_device_t* dev, unsigned int absolute_degree);
+
+    /*
+     * Informs gralloc about the UI rotation. This is needed in the mirroring use
+     * case to get the correct orientation on the external device, e.g. HDMI.
+     */
+    void (*UIRotationChange)(struct framebuffer_device_t* dev, int uiRotation);
+
+    /*
+     * Enables the mirroring of the main display content to an external device,
+     * e.g. HDMI.
+     */
+    void (*enableHDMIMirroring)(struct framebuffer_device_t* dev, int enable);
+#endif
+
     void* reserved_proc[6];
 
 } framebuffer_device_t;
diff --git a/hardware/libhardware/include/hardware/hwcomposer.h b/hardware/libhardware/include/hardware/hwcomposer.h
index 86479d3..e74045e 100644
--- a/hardware/libhardware/include/hardware/hwcomposer.h
+++ b/hardware/libhardware/include/hardware/hwcomposer.h
@@ -438,6 +438,20 @@ typedef struct hwc_module {
     struct hw_module_t common;
 } hwc_module_t;
 
+#ifdef STE_HARDWARE
+/*
+ * names for setParameter()
+ */
+enum {
+    /* Specifies the UI orientation */
+    HWC_UI_ORIENTATION = 0x00000000,
+    /* Specifies if hardware rotation is used */
+    HWC_HARDWARE_ROTATION = 0x00000001,
+    /* Set the hdmi plug status */
+    HWC_HDMI_PLUGGED = 0x00000002,
+};
+#endif
+
 typedef struct hwc_composer_device_1 {
     struct hw_device_t common;
 
@@ -626,6 +640,18 @@ typedef struct hwc_composer_device_1 {
      */
     void* reserved_proc[4];
 
+#ifdef STE_HARDWARE
+    /*
+     * This hook is vendor specific and optional.
+     *
+     * (*setParameter)() makes the hardware composer aware of the system state,
+     * e.g. hdmi plug status and ui rotation, so that it can make intelligent
+     * decisions on how to handle composed surfaces and cloning in the kernel.
+     */
+    int (*setParameter)(struct hwc_composer_device_1* dev,
+                int param, int value);
+#endif
+
 } hwc_composer_device_1_t;
 
 /** convenience API for opening and closing a device */

