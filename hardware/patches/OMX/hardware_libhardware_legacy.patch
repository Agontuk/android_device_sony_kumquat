diff --git a/hardware/libhardware_legacy/audio/AudioPolicyCompatClient.cpp b/hardware/libhardware_legacy/audio/AudioPolicyCompatClient.cpp
index 162968c..f6e67b6 100644
--- a/hardware/libhardware_legacy/audio/AudioPolicyCompatClient.cpp
+++ b/hardware/libhardware_legacy/audio/AudioPolicyCompatClient.cpp
@@ -74,6 +74,21 @@ audio_io_handle_t AudioPolicyCompatClient::openInput(audio_module_handle_t modul
                                                      audio_devices_t *pDevices,
                                                      uint32_t *pSamplingRate,
                                                      audio_format_t *pFormat,
+#ifdef STE_AUDIO
+                                                     audio_channel_mask_t *pChannelMask,
+                                                     audio_input_clients *pInputClientId)
+{
+    return mServiceOps->open_input_on_module(mService, module, pDevices,
+                                             pSamplingRate, pFormat, pChannelMask, pInputClientId);
+}
+
+status_t AudioPolicyCompatClient::closeInput(audio_io_handle_t input,
+                                            audio_input_clients *inputClientId)
+{
+    return mServiceOps->close_input(mService, input, inputClientId);
+}
+
+#else
                                                      audio_channel_mask_t *pChannelMask)
 {
     return mServiceOps->open_input_on_module(mService, module, pDevices,
@@ -84,6 +99,7 @@ status_t AudioPolicyCompatClient::closeInput(audio_io_handle_t input)
 {
     return mServiceOps->close_input(mService, input);
 }
+#endif
 
 status_t AudioPolicyCompatClient::setStreamOutput(AudioSystem::stream_type stream,
                                              audio_io_handle_t output)
diff --git a/hardware/libhardware_legacy/audio/AudioPolicyCompatClient.h b/hardware/libhardware_legacy/audio/AudioPolicyCompatClient.h
index 494c8af..afc20ee 100644
--- a/hardware/libhardware_legacy/audio/AudioPolicyCompatClient.h
+++ b/hardware/libhardware_legacy/audio/AudioPolicyCompatClient.h
@@ -54,8 +54,15 @@ public:
                                         audio_devices_t *pDevices,
                                         uint32_t *pSamplingRate,
                                         audio_format_t *pFormat,
+#ifdef STE_AUDIO
+                                        audio_channel_mask_t *pChannelMask,
+                                        audio_input_clients *pInputClientId = NULL);
+    virtual status_t closeInput(audio_io_handle_t input,
+                                audio_input_clients *inputClientId = NULL);
+#else
                                         audio_channel_mask_t *pChannelMask);
     virtual status_t closeInput(audio_io_handle_t input);
+#endif
     virtual status_t setStreamOutput(AudioSystem::stream_type stream, audio_io_handle_t output);
     virtual status_t moveEffects(int session,
                                  audio_io_handle_t srcOutput,
diff --git a/hardware/libhardware_legacy/audio/AudioPolicyManagerBase.cpp b/hardware/libhardware_legacy/audio/AudioPolicyManagerBase.cpp
index 9674adc..797a945 100644
--- a/hardware/libhardware_legacy/audio/AudioPolicyManagerBase.cpp
+++ b/hardware/libhardware_legacy/audio/AudioPolicyManagerBase.cpp
@@ -902,7 +902,12 @@ audio_io_handle_t AudioPolicyManagerBase::getInput(int inputSource,
                                     uint32_t samplingRate,
                                     uint32_t format,
                                     uint32_t channelMask,
+#ifdef STE_AUDIO
+                                    AudioSystem::audio_in_acoustics acoustics,
+                                    audio_input_clients *inputClientId)
+#else
                                     AudioSystem::audio_in_acoustics acoustics)
+#endif
 {
     audio_io_handle_t input = 0;
     audio_devices_t device = getDeviceForInputSource(inputSource);
@@ -958,7 +963,12 @@ audio_io_handle_t AudioPolicyManagerBase::getInput(int inputSource,
                                     &inputDesc->mDevice,
                                     &inputDesc->mSamplingRate,
                                     &inputDesc->mFormat,
+#ifdef STE_AUDIO
+                                    &inputDesc->mChannelMask,
+                                    inputClientId);
+#else
                                     &inputDesc->mChannelMask);
+#endif
 
     // only accept input with the exact requested set of parameters
     if (input == 0 ||
diff --git a/hardware/libhardware_legacy/audio/audio_policy_hal.cpp b/hardware/libhardware_legacy/audio/audio_policy_hal.cpp
index e44bc48..a938470 100644
--- a/hardware/libhardware_legacy/audio/audio_policy_hal.cpp
+++ b/hardware/libhardware_legacy/audio/audio_policy_hal.cpp
@@ -177,11 +177,20 @@ static audio_io_handle_t ap_get_input(struct audio_policy *pol, audio_source_t i
                                       uint32_t sampling_rate,
                                       audio_format_t format,
                                       audio_channel_mask_t channelMask,
+#ifdef STE_AUDIO
+                                      audio_in_acoustics_t acoustics,
+                                      audio_input_clients *inputClientId)
+#else
                                       audio_in_acoustics_t acoustics)
+#endif
 {
     struct legacy_audio_policy *lap = to_lap(pol);
     return lap->apm->getInput((int) inputSource, sampling_rate, (int) format, channelMask,
+#ifdef STE_AUDIO
+                              (AudioSystem::audio_in_acoustics)acoustics, inputClientId);
+#else
                               (AudioSystem::audio_in_acoustics)acoustics);
+#endif
 }
 
 static int ap_start_input(struct audio_policy *pol, audio_io_handle_t input)
diff --git a/hardware/libhardware_legacy/include/hardware_legacy/AudioPolicyInterface.h b/hardware/libhardware_legacy/include/hardware_legacy/AudioPolicyInterface.h
index 7847bdd..b82de09 100644
--- a/hardware/libhardware_legacy/include/hardware_legacy/AudioPolicyInterface.h
+++ b/hardware/libhardware_legacy/include/hardware_legacy/AudioPolicyInterface.h
@@ -112,7 +112,12 @@ public:
                                     uint32_t samplingRate = 0,
                                     uint32_t Format = AudioSystem::FORMAT_DEFAULT,
                                     uint32_t channels = 0,
+#ifdef STE_AUDIO
+                                    AudioSystem::audio_in_acoustics acoustics = (AudioSystem::audio_in_acoustics)0,
+                                    audio_input_clients *inputClientId = NULL) = 0;
+#else
                                     AudioSystem::audio_in_acoustics acoustics = (AudioSystem::audio_in_acoustics)0) = 0;
+#endif
     // indicates to the audio policy manager that the input starts being used.
     virtual status_t startInput(audio_io_handle_t input) = 0;
     // indicates to the audio policy manager that the input stops being used.
@@ -219,9 +224,16 @@ public:
                                         audio_devices_t *pDevices,
                                         uint32_t *pSamplingRate,
                                         audio_format_t *pFormat,
+#ifdef STE_AUDIO
+                                        audio_channel_mask_t *pChannelMask,
+                                        audio_input_clients *pInputClientId = NULL) = 0;
+    // closes an audio input
+    virtual status_t closeInput(audio_io_handle_t input, audio_input_clients *pInputClientId = NULL) = 0;
+#else
                                         audio_channel_mask_t *pChannelMask) = 0;
     // closes an audio input
     virtual status_t closeInput(audio_io_handle_t input) = 0;
+#endif
     //
     // misc control functions
     //
diff --git a/hardware/libhardware_legacy/include/hardware_legacy/AudioPolicyManagerBase.h b/hardware/libhardware_legacy/include/hardware_legacy/AudioPolicyManagerBase.h
index 8343f2b..218f46e 100644
--- a/hardware/libhardware_legacy/include/hardware_legacy/AudioPolicyManagerBase.h
+++ b/hardware/libhardware_legacy/include/hardware_legacy/AudioPolicyManagerBase.h
@@ -104,7 +104,12 @@ public:
                                             uint32_t samplingRate,
                                             uint32_t format,
                                             uint32_t channels,
+#ifdef STE_AUDIO
+                                            AudioSystem::audio_in_acoustics acoustics,
+                                            audio_input_clients *inputClientId = NULL);
+#else
                                             AudioSystem::audio_in_acoustics acoustics);
+#endif
 
         // indicates to the audio policy manager that the input starts being used.
         virtual status_t startInput(audio_io_handle_t input);

